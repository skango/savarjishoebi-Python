# აქ შემოიტანე sityvtamoduli. თუ გსურს, რამე სხვა ფსევდონიმი მიანიჭე
import sityvtamoduli as s

# ქვემოთ ჩამოთვლილ მუდმივები არ შეცვალოთ

# კროსვორდში მოცემული კითხვები
KITXVEBI = {
    1: 'ტკბილი ცივი მკურნალობა, რომელიც უფროსებს და ბავშვებს უყვართ',
    2: 'ავეჯის ნაწილი. ჩვეულებრივ ჭამენ და ასწავლიან გაკვეთილებს',
    3: 'ადგილი, სადაც ბევრი მარილიანი წყალია. ბევრი მიდის იქ დასასვენებლად',
    4: 'ეკლებით დაფარული ცხოველი',
    5: 'ასე ჰქვია ჩვენს გვერდით მცხოვრებ ადამიანებს',
    6: 'ზღაპარში კონკიას შესახებ, მასში გადაქცეული გოგრა'
}


SITYVEBI_PASUXEBI = {
    1: 'ნაყინი',
    2: 'მაგიდა',
    3: 'ზღვა',
    4: 'ზღარბი',
    5: 'მეზობლები',
    6: 'ეტლი',
}

# ამას არ შეეხოთ, მე ვამუშავებ
STSORI_PASUXEBI = {
    1: False,
    2: False,
    3: False,
    4: False,
    5: False,
    6: False
}


def mogebis_statusi():
    """
    ამ ფუნქციას გაძლევთ. ხელი არ მოკიდოთ.

    ამოწმებს STSORI_PA11:59 PMSUXEBI-ს ლექსიკონში ყველა პასუხი სწორი არის თუ არა,
    რათა main ფუნქციის მთავარი ციკლი ვმართოთ.
    :return: bool ლოგიკური ტიპი
    """
    return False not in STSORI_PASUXEBI.values()



def pasuxis_shemotsmeba(pasuxebi, adgili, sityva):
    """
    ამოწმებს არგუმენტად მიწოდებული სიტყვა, sityva, უდრის თუ არა
    pasuxebi ლექსიკონში adgili-ს ადგილას მოთავსებულ სიტყვას.

    True - sityva უდრის pasuxebi ლექსიკონში adgili გასაღებით მითითებულ
    მნიშვნელობას
    False - sityva არ უდრის pasuxebi ლექსიკონში adgili გასაღებით მითითებულ
    მნიშვნელობას

    :param pasuxebi: dict ლექსიკონი. წარმოადგენს კროსვორდების პასუხებს.
    :param adgili: int მთელრიცხვა მონაცემთა ტიპი. წარმოადგენს კროსვორდის
    პასუხის ადგილს
    :param sityva: str სტრიქონი. წარმოადგენს პასუხს
    :return: bool ლოგიკური ტიპი. True ან False
    """
    # ამ ხაზს გაძლევთ
    STSORI_PASUXEBI[adgili] = True
    # დანარჩენი დასაწერი აქვთ
    return pasuxebi[adgili] == sityva



def dabechde_kitxvebi(leqsikoni):
    """
    მოცემული ლექსიკონის თითო გასაღებსა და მის მიერ მითითებულ მნიშვნელობას
    ბეჭდავს კონსოლში.

    :param leqsikoni: dict ლექსიკონი, რომლის გასაღებები არის კროსვორდის
    კითხვის ნომრები და მისი მნიშვნელობები შესატანი სიტყვის მინიშნება.

    მაგალითად,
    {
        1: 'ტკბილი ცივი მკურნალობა, რომელიც უფროსებს და ბავშვებს უყვართ',
        ...
        4: 'ზღაპარში კონკიას შესახებ, მასში გადაქცეული გოგრა'
    }
    """
    for i in leqsikoni:
        print(f"{i}) {leqsikoni[i]}")


def milocva():
    """
    მომხმარებელს ულოცავს კროსვორდის წარმატებულად შევსებას.
    რამე მოლოცვას ბეჭდავს კონსოლში
    """
    print("gilocaav shen moige datvis ...")


def main():
    """
    ბიძაჩვენი, კროსვორდების პელე, კვდება და გვთხოვს, მისი ბავშვობვის
    პირველი კროსვორდი თავიდან დავაწერინოთ. მოდი, მეტიც ვქნათ და პატარა
    პროგრამაც დავუწეროთ. ეს ბოლო საჩუქარი გავუკეთოთ.

    ფუნქციის ბლოკში, კომენტარის სახით გაწერილ ინსტრუქციების მიჰყევით,
    რათა ბოლომდე შეასრულოთ ეს კეთილი საქმე.
    """
    # ამას ხელი არ ახლოთ, მე ვამოწმებ რაღაცას
    mougia = mogebis_statusi()

    # გჩუქნით ამ ციკლს, ლოგიკურად რომ გაიმართოს მთლიანი პროგრამა,
    # და პასუხამდე მისვლა რომ შეძლოთ
    while not mougia:
        # ქვემოთ მოცემული ისტრუქციები ნაბიჯ-ნაბიჯ შეასრულეთ და ციკლის
        # დასაწერი ინსტრუქცები ციკლის ტანში მოათავსეთ

        # 0. გამოიძახე ფუნქცია, რომლითაც დაბეჭდავ ყველა კითხვას,
        # dabechde_kitxvebi და მიაწოდე მუდმივა KITXVEBI არგუმენტად
        dabechde_kitxvebi(KITXVEBI)


        # 1. მომხმარებელს შეატანინე წინადადება, გასაგები სტრიქონი დაუწერე
        # კონსოლში; ცვლადში შეინახე
        winadadeba = input("შეიტანე წინადადება (ვიცი რომ გშია მაგრამ აქ ვერ შეჭამ რესტორნის დავალებაში გადადი)")
        # 2. გამოიძახე sityvtamoduli-ში გაწერილი tsinadadebis_damushaveba
        # ფუნქცია, არგუმენტად მიაწოდე, წინა მე-1 ნაბიჯის შედეგად მიღებული
        # სტრიქონი; შედეგად მიღებული სია შეინახე ცვლადში
        sia = s.tsinadadebis_damushaveba(winadadeba)
        # 3. წინა, მე-2 ნაბიჯის შედეგად მიღებული სიაზე მოახდინე იტერაცია.
        # თიო იტერაციაზე:
        for i in sia:

            # ა. დაამუშავე შენახული სიტყვა sityvtamoduli-ში გაწერილი
            # sityvis_damushaveba ფუნქციის გამოძახებით
            s.sityvis_damushaveba(i)

            # ბ. sityvtamoduli-დან გამოიძახე sityvis_analizi ფუნქცია, და დაბეჭდე
            # ანალიზის შედეგი
            print(s.sityvis_analizi(i))


            # გ. მომხმარებელს ჰკითხე, რა ადგილას სსურს სიტყვის ჩაწერა, ადგილი უნდა იყოს
            # მთელრიცხვა ტიპის მონაცემი
            adgili = int(input("რა ადგილას გინდა ჩაწერო სიტყვა?"))
            sityva = input("სიტყვა:")
            # დ. შეამოწმე პასუხები, pasuxis_shemotsmeba ფუნქციის გამოძახებით;
            # შედეგი შეინახე ცვლადში
            shemotsemba = pasuxis_shemotsmeba(SITYVEBI_PASUXEBI,adgili,sityva)

            # ე. კონსოლში გამოიტანე მომხმარელის მიერ შეტანილი სიტყვა და ადგილი,
            # და წინა ფუნქციის გამოძახდების შედეგი - სწორი იყო თუ არა
            print(f"{sityva} {adgili} {shemotsemba}")

        # ამას ხელი არ ახლო, მე მიწერია, რათა მთელი პროგრამა ამუშავდეს,
        # როგორც ველოდეიბ, ისე
        mougia = mogebis_statusi()


    # 7. თუ ციკლიდან გამოვედით, ესე იგი კროსვორდი შევასრულეთ; მომხმარებელს
    # მივულოცოთ! გამოიძახეთ ფუნქცია milocva
    milocva()


main()
