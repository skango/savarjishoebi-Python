# მუდმივები, რომლებსაც ხელი არ უნდა ახლოთ
ELEMENTEBI_1 = [
    3, 4, 5, 2, 3, 1, 2, 4, 'სშია', 'არ სშია'
]


ELEMENTEBI_2 = [
    3, 2, 2, 3, 6, 'სშია', 'სშია', 'სშია'
]


"""
0. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებულ სიას გარდაქმნის სიმრავლედ
და დააბრუნებს მას

    :param sia: list სია
    :return: set სიმრავლე 
"""



"""
1. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებული სიმრავლეების უნისონს
გამოითვლის და დააბრუნებს
    
    :param simravle_a: set სიმრავლე
    :param simravle_b: set სიმრავლე   
    :return: set სიმრავლე, უნისონის ოპერაციის შედეგად მიღებული
"""



"""
2. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებული სიმრავლეების თანაკვეთას
გამოითვლის და დააბრუნებს

    :param simravle_a: set სიმრავლე
    :param simravle_b: set სიმრავლე   
    :return: set სიმრავლე, თანაკვეთის ოპერაციის შედეგად მიღებული
"""



"""
3. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებული A და B სიმრავლის
სხვაობას გამოითვლის და დააბრუნებს

    :param simravle_a: set სიმრავლე, სხვაბოის ოპერატორის ხელმარცხენა
    ოპერანდა - საკლები
    :param simravle_b: set სიმრავლე სხვაბოის ოპერატორის ხელმარჯვენა
    ოპერანდა - მაკლები
    :return: set სიმრავლე, სხვაბოის ოპერაციის შედეგად მიღებული
"""



"""
4. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებული A და B სიმრავლის
სიმეტრიულ სხვაობას გამოითვლის და დააბრუნებს

:param simravle_a: set სიმრავლე, სხვაბოის ოპერატორის ხელმარცხენა
ოპერანდა - საკლები
:param simravle_b: set სიმრავლე სხვაბოის ოპერატორის ხელმარჯვენა
ოპერანდა - მაკლები
:return: set სიმრავლე, სიმეტრიული სხვაბოის ოპერაციის შედეგად მიღებული
"""



"""
5. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებულ set_a სიმრავლეში
დაამატებს მეორე არგუმენტად მიწოდებულ ელემენტ elem-ს

:param set_a: set სიმრავლე, რომელშიც უნდა დაამატო ელემენტი
:param elem: any რამე მონაცემთა ტიპი, რომლის სიმრავლეში შენახვა გამართულია
"""



"""
6. დაწერე ფუნქცია, რომელიც არგუმენტად მიწოდებულ set_a სიმრავლიდან
წაშლის მეორე არგუმენტად მიწოდებულ ელემენტ elem-ს:

რამდენიმე გზა არსებობს ამის შესასრულებლად.

ერთ-ერთია:
0. შეამოწმე, elem არსებობს თუ არა set_a სიმრავლეში:
    ა. თუ ის არსებობს, წაშალე
    ბ. თუ არა, არ წაშალო

კიდევ შეგიძლია სიმრავლის მონაცემთა ტიპზე გამართული ერთ-ერთი მეთოდი
(ფუნქცია) გამოიძახო, რომელიც თავისით აგვარებს თუ არგუმენტად მიწოდებული
ელემენტი სიმრავლეში არ არსებობს წაშლისას.


:param set_a: set სიმრავლე, რომლიდანაც უნდა წავშალოთ ელემენტი
:param elem: any რამე მონაცემთა ტიპი, რომლის სიმრავლეში შენახვა გამართულია
და რომელიც **შეიძლება** იყოს სიმრავლეში
"""



"""
7. დაწერე ფუნქცია, რომელიც შეამოწმებს პირველ არგუმენტად მიწოდებული
სიმრავლე, set_a, არის თუ არა მეორე არგუმენტად მიწოდებული სიმრავლის,
set_b-ს, **ქვესიმრავლე**:

- თუ არის, დააბრუნე True
- თუ არ არის, დააბრუნე False

:param set_a: set სიმრავლე; ვამოწმებთ ეს არის თუ არა მეორე სიმრავლის
ქვესიმრავლე
:param set_b: set სიმრავლე; მეორე სიმრავლე, რაც შეიძლება წინის ზესიმრავლე
იყოს
:return: bool ლოგიკური მონაცემთა ტიპი
"""



"""
8. დაწერე ფუნქცია, რომელიც შეამოწმებს პირველ არგუმენტად მიწოდებული
სიმრავლე, set_a, არის თუ არა მეორე არგუმენტად მიწოდებული სიმრავლის,
set_b-ს, **ზესიმრავლე**:

- თუ არის, დააბრუნე True
- თუ არ არის, დააბრუნე False

:param set_a: set სიმრავლე; ვამოწმებთ ეს არის თუ არა მეორე სიმრავლის
ზესიმრავლე
:param set_b: set სიმრავლე; მეორე სიმრავლე, რაც შეიძლება წინის ზესიმრავლე
იყოს
:return: bool ლოგიკური მონაცემთა ტიპი
"""



def main():
    """
    მთავარი ფუნქცია, სადაც უნდა მოათავსოთ ზემოთ გაწერილი დამხმარე ფუნქციების
    გამოძახება. დეტალურად წაიკითხეთ ფუნქციის ტანში, კომენტარების სახით
    მოცემული ინსტრუქციები.



    ბოლოს მოსალოდნელი შედეგი:

    A: {1, 2, 3, 4, 5, 'სშია', 'არ სშია'}
    B: {'სშია', 2, 3, 6}
    A U B: {1, 2, 3, 4, 5, 6, 'სშია', 'არ სშია'}
    A ∩ B: {1, 2, 3, 4, 5, 6, 'სშია', 'არ სშია'}")
    A - B: {1, 4, 5, 'არ სშია'}
    B - A: {6}
    A \ B: {1, 4, 5, 6, 'არ სშია'}
    B \ A: {1, 4, 5, 'არ სშია', 6}
    ვამატებთ 4-ს სიმრავლე {'სშია', 2, 3, 6}-ში
    შედეგი: { 2, 3, 4, 6, 'სშია' }

    ვაკლებთ 6-ს სიმრავლე { 2, 3, 4, 6, 'სშია' }-დან
    შედეგი: {2, 3, 4, 6, 'სშია'}

    ვამოწმებთ, არის თუ არა A, B-ს ქვესიმრავლე
    False

    ვამოწმებთ, არის თუ არა B, A-ს ქვესიმრავლე
    True

    ვამოწმებთ, არის თუ არა A, B-ს ზესიმრავლე
    True

    ვამოწმებთ, არის თუ არა B, A-ს ზესიმრავლე
    False
    """
    # 0. გამოიძახეთ მე-0 დაწერილი ფუნქცია 2-ჯერ, რომ შექმნათ სიმრავლეები
    # ELEMENTEBI_1-სა და ELEMENTEBI_2-ის სიებისაგან
    # თითო შექმნილი სიმრავლე ცალკე ცვლადში შეინახე


    # 1. თითო სიმრავლე გამოიტანე კონსოლში


    # 2. მე-1 ფუნქცია გამოიძახე, მიაწოდე ორივე სიმრავლე, გამოიყვანე უნისონი,
    # გასაგებად დაბეჭდე შედეგი


    # 3. მე-2 ფუნქცია გამოიძახე, მიაწოდე ორივე სიმრავლე, გამოიყვანე თანაკვეთა,
    # გასაგებად დაბეჭდე შედეგი


    # 4. მე-3 ფუნქცია გამოიძახე, მიაწოდე ორივე სიმრავლე, გამოიყვანე სხვაბოა,
    # გასაგებად დაბეჭდე შედეგი


    # 5. მე-3 ფუნქცია გამოიძახე, მიაწოდე ორივე სიმრავლე, გამოიყვანე სხვაბოა,
    # ოღონდ, ახლა არგუემენტების თანმიმდევრობა შეატრიალე


    # 6. მე-4 ფუნქცია გამოიძახე, მიაწოდე ორივე სიმრავლე, გამოიყვანე სიმტერიული
    # სხვაბოა, გასაგებად დაბეჭდე შედეგი


    # 7. მე-4 ფუნქცია გამოიძახე, მიაწოდე ორივე სიმრავლე, გამოიყვანე სიმტერიული
    # სხვაბოა, გასაგებად დაბეჭდე შედეგი, ოღონდ, ახლა არგუმენტების
    # თანმიმდევრობა შეცვალე


    # 8. მე-5 ფუნქცია გამოიძახე, არგუმენტად მიაწოდე სიმრავლე და
    # რამე ელემენტი:
    #   - ეს ელემენტი შეიზლება იყოს რამე მუდმივა
    #   - თუ გინდა, შეგიძლია მომხმარებელს სთხოვო რამე მონაცემის შეტანა
    # დაბეჭდე ახალი სიმრავლე


    # 9. მე-6 ფუნქცია გამოიძახე, არგუმენტად მიაწოდე სიმრავლე და
    # რამე ელემენტი:
    #   - ეს ელემენტი შეიზლება იყოს რამე მუდმივა
    #   - თუ გინდა, შეგიძლია მომხმარებელს სთხოვო რამე მონაცემის შეტანა
    # დაბეჭდე ახალი სიმრავლე

    # 10. მე-7 ფუნქცია გამოიძახე, არგუმენტებად მიაწოდე მე-0 ნაბიჯის
    # შედეგად მიღებული სიმრავლეები


    # 11. მე-7 ფუნქცია გამოიძახე, არგუმენტებად მიაწოდე მე-0 ნაბიჯის
    # შედეგად მიღებული სიმრავლეები, ოღონდ არგუმენტების თანმიმდევრობა
    # შეცვალე


    # 12. მე-8 ფუნქცია გამოიძახე, არგუმენტებად მიაწოდე მე-0 ნაბიჯის
    # შედეგად მიღებული სიმრავლეები


    # 13. მე-8 ფუნქცია გამოიძახე, არგუმენტებად მიაწოდე მე-0 ნაბიჯის
    # შედეგად მიღებული სიმრავლეები, ოღონდ არგუმენტების თანმიმდევრობა
    # შეცვალე


main()
